version: "3"
services:
  duckdns:
    image: linuxserver/duckdns
    container_name: duckdns
    environment:
      - TOKEN=${DDNS_TOKEN}
      - SUBDOMAINS=${DDNS_DOMAINS}
      - TZ=Europe/Rome
    restart: unless-stopped
  traefik:
    image: traefik:v2.0
    container_name: traefik
    command:
#      - --log.level=DEBUG
      - --api=true
      - --api.dashboard=true
      - --providers.docker
      - --entryPoints.webSecure.address=:443
      - --entryPoints.ttrss.address=:${PORT_TTRSS}
      - --entryPoints.freshrss.address=:${PORT_FRESHRSS}
      - --entryPoints.ryot.address=:${PORT_RYOT}
      - --entryPoints.traefik.address=:${PORT_DASHBOARD}
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=${NETWORK_NAME}
      - --certificatesResolvers.le.acme.email=kwbmm@${URL}
      - --certificatesResolvers.le.acme.tlsChallenge=true
      - --certificatesResolvers.le.acme.dnsChallenge=true
      - --certificatesResolvers.le.acme.dnsChallenge.provider=duckdns
      # Staging server, test purposes only
#      - --certificatesResolvers.le.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.le.acme.caServer=https://acme-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.le.acme.storage=/letsencrypt/acme.json
    environment:
      - DUCKDNS_TOKEN=${DDNS_TOKEN}
    ports:
      # The Web UI
      - "${PORT_DASHBOARD}:${PORT_DASHBOARD}"
      # For certificates renewal
      - "443:443"
      # TTRSS
      - "${PORT_TTRSS}:${PORT_TTRSS}"
      # FRESHRSS
      - "${PORT_FRESHRSS}:${PORT_FRESHRSS}"
      # RYOT
      - "${PORT_RYOT}:${PORT_RYOT}"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/volumes/traefik-letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${IP_ADDRESS}`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=traefik"
      - "traefik.http.routers.api.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${BASIC_AUTH_USR}:${BASIC_AUTH_PSW}"
    networks:
      - frontend
    restart: unless-stopped
  ttrss:
    image: nventiveux/ttrss:latest
    container_name: ttrss
    environment:
      - TTRSS_SELF_URL_PATH=https://${URL}:${PORT_TTRSS}
      - TTRSS_DB_HOST=ttrss-db
      - TTRSS_DB_TYPE=pgsql
      - TTRSS_DB_USER=ttrss
      - TTRSS_DB_PASS=ttrss
    volumes:
      - ~/volumes/ttrss-plugins:/srv/ttrss/plugins.local
    restart: unless-stopped
    depends_on:
      - ttrss-db
      - traefik
      - duckdns
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ttrss.rule=Host(`${URL}`)"
      - "traefik.http.routers.ttrss.entrypoints=ttrss"
      - "traefik.http.middlewares.secureRedirectTTRss.redirectscheme.scheme=https"
      - "traefik.http.middlewares.secureRedirectTTRss.redirectscheme.port=${PORT_TTRSS}"
      - "traefik.http.routers.ttrss.middlewares=secureRedirectTTRss"
      - "traefik.http.routers.ttrss-sec.tls=true"
      - "traefik.http.routers.ttrss-sec.rule=Host(`${URL}`)"
      - "traefik.http.routers.ttrss-sec.entrypoints=ttrss"
      - "traefik.http.routers.ttrss-sec.tls.certResolver=le"
    networks:
      - frontend
      - backend
  ttrss-db:
    image: postgres:14-alpine
    container_name: ttrss-db
    environment:
      - POSTGRES_USER=ttrss
      - POSTGRES_PASSWORD=ttrss
    volumes:
      - ~/volumes/ttrss-db:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=telegram://${WATCHTOWER_TG_API_TOKEN}@telegram?channels=${WATCHTOWER_TG_CHANNEL_ID}&title=Watchtower
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=28800
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  freshrss:
    image: freshrss/freshrss:edge
    container_name: freshrss
    restart: unless-stopped
    logging:
      options:
        max-size: 10m
    volumes:
      - ~/volumes/freshrss/data:/var/www/FreshRSS/data
      - ~/volumes/freshrss/extensions:/var/www/FreshRSS/extensions
    depends_on:
      - traefik
      - duckdns
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.freshrss.rule=Host(`${URL}`)"
      - "traefik.http.routers.freshrss.entrypoints=freshrss"
      - "traefik.http.middlewares.secureRedirectFreshRSS.redirectscheme.scheme=https"
      - "traefik.http.middlewares.secureRedirectFreshRSS.redirectscheme.port=${PORT_FRESHRSS}"
      - "traefik.http.routers.freshrss.middlewares=secureRedirectFreshRSS"
      - "traefik.http.routers.freshrss-sec.tls=true"
      - "traefik.http.routers.freshrss-sec.rule=Host(`${URL}`)"
      - "traefik.http.routers.freshrss-sec.entrypoints=freshrss"
      - "traefik.http.routers.freshrss-sec.tls.certResolver=le"
    environment:
      TZ: Europe/Rome
      CRON_MIN: '3,33'
    networks:
      - frontend
      - backend

  ryot-db:
    image: postgres:16-alpine
    container_name: ryot-db
    volumes:
      - ~/volumes/ryot-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    networks:
      - backend
    restart: unless-stopped

  ryot:
    image: "ghcr.io/ignisda/ryot:latest"
    container_name: ryot
    environment:
      - DATABASE_URL=postgres://postgres:postgres@ryot-db:5432/postgres
      - USERS_ALLOW_REGISTRATION=false
    restart: unless-stopped
    depends_on:
      - ryot-db
      - traefik
      - duckdns
    networks:
      - frontend
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ryot.rule=Host(`${URL}`)"
      - "traefik.http.routers.ryot.entrypoints=ryot"
      - "traefik.http.middlewares.secureRedirectRyot.redirectscheme.scheme=https"
      - "traefik.http.middlewares.secureRedirectRyot.redirectscheme.port=${PORT_RYOT}"
      - "traefik.http.services.ryot.loadbalancer.server.port=8000"
      - "traefik.http.routers.ryot.middlewares=secureRedirectRyot"
      - "traefik.http.routers.ryot-sec.tls=true"
      - "traefik.http.routers.ryot-sec.rule=Host(`${URL}`)"
      - "traefik.http.routers.ryot-sec.entrypoints=ryot"
      - "traefik.http.routers.ryot-sec.tls.certResolver=le"

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
